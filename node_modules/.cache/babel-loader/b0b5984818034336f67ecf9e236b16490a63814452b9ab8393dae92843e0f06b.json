{"ast":null,"code":"var _jsxFileName = \"/home/architect/course_work/puppyBowl2/src/index.js\",\n  _s = $RefreshSig$();\n// Puppy bowl routing based on her demo!\n\n// STEPS FOR:\n// HOW DO YOU CREATE NEW DATA ON AN API'S SERVER'S DATABASE? \n// Step 1: We need to write some JSX that will create a \"form\" for our users to create a new puppy.\n// Step 2: We need to create as many pieces of state as we have input tags for our \"Create New Puppy\" form. \n// Step 3: We need to set up some onChange event listeners so that when users are \"changing\" the inputs of the new puppy form, those changes are reflected in the corresponding states (i.e. the states from step 2).\n// Step 4: We need to write a callback function for an onSubmit event listener so that when our users click the submit button, we can send a fetch request to the API (for Puppy Bowl) that takes the data we stored in our input's states.  \n// Step 4a: When you are sending a request to an API to make NEW data (i.e. a Creation operation), we use what is called a POST request. \n// Note: Be sure to check the notes below for step 4a for how to configure your fetch request function.\n// Step 5: We are going to use the callback function from step 4 and attach it as an event listener's callback on the form itself.\n// Step 6: [Optional] What if we want to see the new data we made appear right away rather than having to hard refresh the page?\n// To address this problem, we will have to update our \"Puppies\" state manually in our function that created the new puppy. \n\nimport { createRoot } from \"react-dom/client\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [puppies, setPuppies] = useState([]);\n  // Step 2:\n  const [newPuppyName, setNewPuppyName] = useState(\"\");\n  const [newPuppyBreed, setNewPuppyBreed] = useState(\"\");\n  async function fetchPuppyData() {\n    try {\n      const response = await fetch('https://fsa-puppy-bowl.herokuapp.com/api/2209-ftb-mt-web-ft/players');\n      const translatedData = await response.json();\n      setPuppies(translatedData.data.players);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  useEffect(() => {\n    fetchPuppyData();\n  }, []);\n\n  // Step 4: Callback function for the onSubmit listener for the new puppy form:\n  async function sendNewPuppyRequest(event) {\n    event.preventDefault();\n    try {\n      // Step 4a: \n      const response = await fetch('https://fsa-puppy-bowl.herokuapp.com/api/2209-ftb-mt-web-ft/players', {\n        // The method key specifies what TYPE of request we're sending. We have learned about 2 so far: \n        // GET requests (reading operations)\n        // POST requests (creation operations)\n        method: \"POST\",\n        // The headers key refers to what metadata you want the API to know about the request you are sending\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // The body key refers to what specific JS data you are trying to send to the API to \"create\" a new puppy.\n        body: JSON.stringify({\n          name: newPuppyName,\n          breed: newPuppyBreed\n        })\n      });\n      const translatedData = await response.json();\n      console.log(translatedData);\n      // Step 6:\n      setPuppies([...puppies, translatedData.data.newPlayer]);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Welcome to Puppy Bowl!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: puppies.length ? puppies.map(singlePuppyElement => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Name: \", singlePuppyElement.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Puppy Breed: \", singlePuppyElement.breed]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 41\n          }, this)]\n        }, singlePuppyElement.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 37\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No data yet, still loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 34\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      // Step 5: Attaching the callback function for the submit event listener for your new puppy form\n      onSubmit: sendNewPuppyRequest,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"New Puppy Name Here\",\n        onChange: event => {\n          setNewPuppyName(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"New Puppy Breed Here\",\n        onChange: event => {\n          setNewPuppyBreed(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 17\n  }, this);\n};\n_s(App, \"wHrYReaAJ38q0WNOX2PN0VabaNQ=\");\n_c = App;\nconst appElement = document.getElementById(\"app\");\nconst root = createRoot(appElement);\nroot.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 117,\n  columnNumber: 21\n}, this));\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["createRoot","useState","useEffect","jsxDEV","_jsxDEV","App","_s","puppies","setPuppies","newPuppyName","setNewPuppyName","newPuppyBreed","setNewPuppyBreed","fetchPuppyData","response","fetch","translatedData","json","data","players","error","console","log","sendNewPuppyRequest","event","preventDefault","method","headers","body","JSON","stringify","name","breed","newPlayer","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","singlePuppyElement","id","onSubmit","type","placeholder","onChange","target","value","_c","appElement","document","getElementById","root","render","$RefreshReg$"],"sources":["/home/architect/course_work/puppyBowl2/src/index.js"],"sourcesContent":["// Puppy bowl routing based on her demo!\n\n// STEPS FOR:\n// HOW DO YOU CREATE NEW DATA ON AN API'S SERVER'S DATABASE? \n    // Step 1: We need to write some JSX that will create a \"form\" for our users to create a new puppy.\n    // Step 2: We need to create as many pieces of state as we have input tags for our \"Create New Puppy\" form. \n    // Step 3: We need to set up some onChange event listeners so that when users are \"changing\" the inputs of the new puppy form, those changes are reflected in the corresponding states (i.e. the states from step 2).\n    // Step 4: We need to write a callback function for an onSubmit event listener so that when our users click the submit button, we can send a fetch request to the API (for Puppy Bowl) that takes the data we stored in our input's states.  \n        // Step 4a: When you are sending a request to an API to make NEW data (i.e. a Creation operation), we use what is called a POST request. \n            // Note: Be sure to check the notes below for step 4a for how to configure your fetch request function.\n    // Step 5: We are going to use the callback function from step 4 and attach it as an event listener's callback on the form itself.\n    // Step 6: [Optional] What if we want to see the new data we made appear right away rather than having to hard refresh the page?\n        // To address this problem, we will have to update our \"Puppies\" state manually in our function that created the new puppy. \n\n        import { createRoot } from \"react-dom/client\";\n        import { useState, useEffect } from \"react\"; \n        \n        const App = () => {\n            const [puppies, setPuppies] = useState([]);\n            // Step 2:\n            const [newPuppyName, setNewPuppyName] = useState(\"\");\n            const [newPuppyBreed, setNewPuppyBreed] = useState(\"\"); \n        \n        \n            async function fetchPuppyData() {\n                try {\n                    const response = await fetch('https://fsa-puppy-bowl.herokuapp.com/api/2209-ftb-mt-web-ft/players');\n        \n                    const translatedData = await response.json(); \n        \n                    setPuppies(translatedData.data.players)\n                } catch (error) {\n                    console.log(error); \n                }\n            }\n        \n            useEffect(() => {\n                fetchPuppyData(); \n            }, [])\n        \n            // Step 4: Callback function for the onSubmit listener for the new puppy form:\n            async function sendNewPuppyRequest(event) {\n                event.preventDefault(); \n        \n                try {\n                    // Step 4a: \n                    const response = await fetch('https://fsa-puppy-bowl.herokuapp.com/api/2209-ftb-mt-web-ft/players', {\n                        // The method key specifies what TYPE of request we're sending. We have learned about 2 so far: \n                            // GET requests (reading operations)\n                            // POST requests (creation operations)\n                        method: \"POST\",\n                        // The headers key refers to what metadata you want the API to know about the request you are sending\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        // The body key refers to what specific JS data you are trying to send to the API to \"create\" a new puppy.\n                        body: JSON.stringify({\n                            name: newPuppyName,\n                            breed: newPuppyBreed\n                        })\n                    });       \n                    \n                    const translatedData = await response.json(); \n        \n                    console.log(translatedData); \n                    // Step 6:\n                    setPuppies([...puppies, translatedData.data.newPlayer])\n        \n                } catch (error) {\n                    console.log(error); \n                }\n            }\n        \n            return (\n                <div>\n                    <h2>Welcome to Puppy Bowl!</h2>\n        \n                    <section>\n                        {\n                            puppies.length ? puppies.map((singlePuppyElement) => {\n                                return (\n                                    <div key={singlePuppyElement.id}>\n                                        <p>Name: {singlePuppyElement.name}</p>\n                                        <p>Puppy Breed: {singlePuppyElement.breed}</p>\n                                        {/* <img style={{\n                                            width: \"75px\",\n                                            height: \"75px\"\n                                        }} src={singlePuppyElement.imageUrl}></img> */}\n                                    </div>\n                                )\n                            }) : <div>No data yet, still loading...</div>\n                        }\n                    </section>\n        \n                    {/* Step 1: */}\n                    <form\n                        // Step 5: Attaching the callback function for the submit event listener for your new puppy form\n                        onSubmit={sendNewPuppyRequest}\n                    >\n                        {/* Step 3: OnChange event listeners + their callback functions for your inputs in your form */}\n                        <input type=\"text\" placeholder=\"New Puppy Name Here\" onChange={(event) => {\n                            setNewPuppyName(event.target.value)\n                        }}></input>\n        \n                        <input type=\"text\" placeholder=\"New Puppy Breed Here\" onChange={(event) => {\n                            setNewPuppyBreed(event.target.value)\n                        }}></input>\n        \n                        <button type=\"submit\">Submit</button>\n                    </form>\n                </div>\n            )\n        }\n        \n        const appElement = document.getElementById(\"app\");\n        const root = createRoot(appElement);\n        root.render(<App />)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}