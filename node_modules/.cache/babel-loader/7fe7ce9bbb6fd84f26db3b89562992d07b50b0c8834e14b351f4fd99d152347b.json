{"ast":null,"code":"var _jsxFileName = \"/home/architect/course_work/puppyBowl2/src/components/Roster.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [puppies, setPuppies] = useState([]);\nconst Roster = () => {\n  _s();\n  async function fetchPuppyData() {\n    try {\n      const response = await fetch('https://fsa-puppy-bowl.herokuapp.com/api/2209-ftb-mt-web-ft/players');\n      const translatedData = await response.json();\n      setPuppies(translatedData.data.players);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  useEffect(() => {\n    fetchPuppyData();\n  }, []);\n\n  // Step 4: Callback function for the onSubmit listener for the new puppy form:\n  async function sendNewPuppyRequest(event) {\n    event.preventDefault();\n    try {\n      // Step 4a: \n      const response = await fetch('https://fsa-puppy-bowl.herokuapp.com/api/2209-ftb-mt-web-ft/players', {\n        // The method key specifies what TYPE of request we're sending. We have learned about 2 so far: \n        // GET requests (reading operations)\n        // POST requests (creation operations)\n        method: \"POST\",\n        // The headers key refers to what metadata you want the API to know about the request you are sending\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // The body key refers to what specific JS data you are trying to send to the API to \"create\" a new puppy.\n        body: JSON.stringify({\n          name: newPuppyName,\n          breed: newPuppyBreed\n        })\n      });\n      const translatedData = await response.json();\n      console.log(translatedData);\n      // Step 6:\n      setPuppies([...puppies, translatedData.data.newPlayer]);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"roster-container\",\n    children: puppies.length ? puppies.map(singlePuppyElement => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dog-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"dog-id\",\n            children: [\"Name: \", singlePuppyElement.name, \" ID: #\", singlePuppyElement.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://i.natgeofe.com/n/4f5aaece-3300-41a4-b2a8-ed2708a0a27c/domestic-dog_thumb_4x3.jpg\",\n            width: \"100\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this)\n      }, singlePuppyElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data yet, still loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 18\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(Roster, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Roster;\nexport default Roster;\nvar _c;\n$RefreshReg$(_c, \"Roster\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","puppies","setPuppies","Roster","_s","fetchPuppyData","response","fetch","translatedData","json","data","players","error","console","log","sendNewPuppyRequest","event","preventDefault","method","headers","body","JSON","stringify","name","newPuppyName","breed","newPuppyBreed","newPlayer","className","children","length","map","singlePuppyElement","id","fileName","_jsxFileName","lineNumber","columnNumber","src","width","_c","$RefreshReg$"],"sources":["/home/architect/course_work/puppyBowl2/src/components/Roster.js"],"sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\n\nconst [puppies, setPuppies] = useState([]);\n\nconst Roster = () => {\n    async function fetchPuppyData() {\n        try {\n            const response = await fetch('https://fsa-puppy-bowl.herokuapp.com/api/2209-ftb-mt-web-ft/players');\n\n            const translatedData = await response.json(); \n\n            setPuppies(translatedData.data.players)\n        } catch (error) {\n            console.log(error); \n        }\n    }\n\n    useEffect(() => {\n        fetchPuppyData(); \n    }, [])\n\n    // Step 4: Callback function for the onSubmit listener for the new puppy form:\n    async function sendNewPuppyRequest(event) {\n        event.preventDefault(); \n\n        try {\n            // Step 4a: \n            const response = await fetch('https://fsa-puppy-bowl.herokuapp.com/api/2209-ftb-mt-web-ft/players', {\n                // The method key specifies what TYPE of request we're sending. We have learned about 2 so far: \n                    // GET requests (reading operations)\n                    // POST requests (creation operations)\n                method: \"POST\",\n                // The headers key refers to what metadata you want the API to know about the request you are sending\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                // The body key refers to what specific JS data you are trying to send to the API to \"create\" a new puppy.\n                body: JSON.stringify({\n                    name: newPuppyName,\n                    breed: newPuppyBreed\n                })\n            });       \n            \n            const translatedData = await response.json(); \n\n            console.log(translatedData); \n            // Step 6:\n            setPuppies([...puppies, translatedData.data.newPlayer])\n\n        } catch (error) {\n            console.log(error); \n        }\n    }\n    \n    return (\n        <section className = \"roster-container\">\n        {\n            puppies.length ? puppies.map((singlePuppyElement) => {\n                return (\n                    <div key={singlePuppyElement.id}>\n                        <div className = \"dog-container\">\n                            <p className= \"dog-id\">Name: {singlePuppyElement.name} ID: #{singlePuppyElement.id}</p>\n                            {/* <p>Puppy Breed: {singlePuppyElement.breed}</p> */}\n                            {/* <img style={{\n                                width: \"75px\",\n                                height: \"75px\"\n                            }} src={singlePuppyElement.imageUrl}></img> */}\n\n                            {/* Need to get the url for the image of the current  */}\n                            <img src=\"https://i.natgeofe.com/n/4f5aaece-3300-41a4-b2a8-ed2708a0a27c/domestic-dog_thumb_4x3.jpg\" width=\"100\"/>\n                        </div>\n                    </div>\n                )\n            }) : <div>No data yet, still loading...</div>\n        }\n     </section>\n    )\n}\nexport default Roster;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;AAE1C,MAAMM,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,eAAeC,cAAcA,CAAA,EAAG;IAC5B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qEAAqE,CAAC;MAEnG,MAAMC,cAAc,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MAE5CP,UAAU,CAACM,cAAc,CAACE,IAAI,CAACC,OAAO,CAAC;IAC3C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACtB;EACJ;EAEAd,SAAS,CAAC,MAAM;IACZO,cAAc,EAAE;EACpB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,eAAeU,mBAAmBA,CAACC,KAAK,EAAE;IACtCA,KAAK,CAACC,cAAc,EAAE;IAEtB,IAAI;MACA;MACA,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,qEAAqE,EAAE;QAChG;QACI;QACA;QACJW,MAAM,EAAE,MAAM;QACd;QACAC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACD;QACAC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjBC,IAAI,EAAEC,YAAY;UAClBC,KAAK,EAAEC;QACX,CAAC;MACL,CAAC,CAAC;MAEF,MAAMlB,cAAc,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MAE5CI,OAAO,CAACC,GAAG,CAACN,cAAc,CAAC;MAC3B;MACAN,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAEO,cAAc,CAACE,IAAI,CAACiB,SAAS,CAAC,CAAC;IAE3D,CAAC,CAAC,OAAOf,KAAK,EAAE;MACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACtB;EACJ;EAEA,oBACIZ,OAAA;IAAS4B,SAAS,EAAG,kBAAkB;IAAAC,QAAA,EAEnC5B,OAAO,CAAC6B,MAAM,GAAG7B,OAAO,CAAC8B,GAAG,CAAEC,kBAAkB,IAAK;MACjD,oBACIhC,OAAA;QAAA6B,QAAA,eACI7B,OAAA;UAAK4B,SAAS,EAAG,eAAe;UAAAC,QAAA,gBAC5B7B,OAAA;YAAG4B,SAAS,EAAE,QAAQ;YAAAC,QAAA,GAAC,QAAM,EAACG,kBAAkB,CAACT,IAAI,EAAC,QAAM,EAACS,kBAAkB,CAACC,EAAE;UAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAK,eAQvFrC,OAAA;YAAKsC,GAAG,EAAC,0FAA0F;YAACC,KAAK,EAAC;UAAK;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAE;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAC/G,GAXAL,kBAAkB,CAACC,EAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAYzB;IAEd,CAAC,CAAC,gBAAGrC,OAAA;MAAA6B,QAAA,EAAK;IAA6B;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAM;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAE1C;AAEf,CAAC;AAAAjC,EAAA,CAzEKD,MAAM;AAAAqC,EAAA,GAANrC,MAAM;AA0EZ,eAAeA,MAAM;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}