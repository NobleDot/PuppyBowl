{"ast":null,"code":"var _jsxFileName = \"/home/architect/course_work/puppyBowl2/src/components/SubmitDog.js\";\nimport React from 'react';\nimport { useState, useEffect } from 'react';\n\n// Step 4: Callback function for the onSubmit listener for the new puppy form:\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function sendNewPuppyRequest(event) {\n  event.preventDefault();\n  try {\n    // Step 4a: \n    const response = await fetch('https://fsa-puppy-bowl.herokuapp.com/api/2209-ftb-mt-web-ft/players', {\n      // The method key specifies what TYPE of request we're sending. We have learned about 2 so far: \n      // GET requests (reading operations)\n      // POST requests (creation operations)\n      method: \"POST\",\n      // The headers key refers to what metadata you want the API to know about the request you are sending\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      // The body key refers to what specific JS data you are trying to send to the API to \"create\" a new puppy.\n      body: JSON.stringify({\n        name: newPuppyName,\n        breed: newPuppyBreed\n      })\n    });\n    const translatedData = await response.json();\n    console.log(translatedData);\n    // Step 6:\n    setPuppies([...puppies, translatedData.data.newPlayer]);\n  } catch (error) {\n    console.log(error);\n  }\n}\nconst SubmitDog = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"name-container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendNewPuppyRequest,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"New Puppy Name Here\",\n        onChange: event => {\n          setNewPuppyName(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"New Puppy Breed Here\",\n        onChange: event => {\n          setNewPuppyBreed(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_c = SubmitDog;\nexport default SubmitDog;\nvar _c;\n$RefreshReg$(_c, \"SubmitDog\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","sendNewPuppyRequest","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","name","newPuppyName","breed","newPuppyBreed","translatedData","json","console","log","setPuppies","puppies","data","newPlayer","error","SubmitDog","className","children","onSubmit","type","placeholder","onChange","setNewPuppyName","target","value","fileName","_jsxFileName","lineNumber","columnNumber","setNewPuppyBreed","_c","$RefreshReg$"],"sources":["/home/architect/course_work/puppyBowl2/src/components/SubmitDog.js"],"sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\n\n// Step 4: Callback function for the onSubmit listener for the new puppy form:\nasync function sendNewPuppyRequest(event) {\n    event.preventDefault(); \n\n    try {\n        // Step 4a: \n        const response = await fetch('https://fsa-puppy-bowl.herokuapp.com/api/2209-ftb-mt-web-ft/players', {\n            // The method key specifies what TYPE of request we're sending. We have learned about 2 so far: \n                // GET requests (reading operations)\n                // POST requests (creation operations)\n            method: \"POST\",\n            // The headers key refers to what metadata you want the API to know about the request you are sending\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            // The body key refers to what specific JS data you are trying to send to the API to \"create\" a new puppy.\n            body: JSON.stringify({\n                name: newPuppyName,\n                breed: newPuppyBreed\n            })\n        });       \n        \n        const translatedData = await response.json(); \n\n        console.log(translatedData); \n        // Step 6:\n        setPuppies([...puppies, translatedData.data.newPlayer])\n\n    } catch (error) {\n        console.log(error); \n    }\n}\n\nconst SubmitDog = () => {\n    return (\n        <div className = \"name-container\">\n                {/* // Step 5: Attaching the callback function for the submit\n                 event listener for your new puppy form */}\n                <form onSubmit={sendNewPuppyRequest}>\n                    {/* Step 3: OnChange event listeners + their callback functions for your inputs in your form */}\n                    <input type=\"text\" placeholder=\"New Puppy Name Here\" onChange={(event) => {\n                        setNewPuppyName(event.target.value)\n                    }}></input>\n    \n                    <input type=\"text\" placeholder=\"New Puppy Breed Here\" onChange={(event) => {\n                        setNewPuppyBreed(event.target.value)\n                    }}></input>\n    \n                    <button type=\"submit\">Submit</button>\n                </form>\n        </div>\n    );\n}\n\nexport default SubmitDog;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,eAAeC,mBAAmBA,CAACC,KAAK,EAAE;EACtCA,KAAK,CAACC,cAAc,EAAE;EAEtB,IAAI;IACA;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qEAAqE,EAAE;MAChG;MACI;MACA;MACJC,MAAM,EAAE,MAAM;MACd;MACAC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACD;MACAC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBC,IAAI,EAAEC,YAAY;QAClBC,KAAK,EAAEC;MACX,CAAC;IACL,CAAC,CAAC;IAEF,MAAMC,cAAc,GAAG,MAAMX,QAAQ,CAACY,IAAI,EAAE;IAE5CC,OAAO,CAACC,GAAG,CAACH,cAAc,CAAC;IAC3B;IACAI,UAAU,CAAC,CAAC,GAAGC,OAAO,EAAEL,cAAc,CAACM,IAAI,CAACC,SAAS,CAAC,CAAC;EAE3D,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZN,OAAO,CAACC,GAAG,CAACK,KAAK,CAAC;EACtB;AACJ;AAEA,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACpB,oBACIxB,OAAA;IAAKyB,SAAS,EAAG,gBAAgB;IAAAC,QAAA,eAGzB1B,OAAA;MAAM2B,QAAQ,EAAE1B,mBAAoB;MAAAyB,QAAA,gBAEhC1B,OAAA;QAAO4B,IAAI,EAAC,MAAM;QAACC,WAAW,EAAC,qBAAqB;QAACC,QAAQ,EAAG5B,KAAK,IAAK;UACtE6B,eAAe,CAAC7B,KAAK,CAAC8B,MAAM,CAACC,KAAK,CAAC;QACvC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,eAEXrC,OAAA;QAAO4B,IAAI,EAAC,MAAM;QAACC,WAAW,EAAC,sBAAsB;QAACC,QAAQ,EAAG5B,KAAK,IAAK;UACvEoC,gBAAgB,CAACpC,KAAK,CAAC8B,MAAM,CAACC,KAAK,CAAC;QACxC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,eAEXrC,OAAA;QAAQ4B,IAAI,EAAC,QAAQ;QAAAF,QAAA,EAAC;MAAM;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAClC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACT;AAEd,CAAC;AAAAE,EAAA,GAnBKf,SAAS;AAqBf,eAAeA,SAAS;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}